name: Deploy UserService to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the application (Skipping tests)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      # Step 7: Decode and set up SSH Key
      - name: Decode SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > ~/decoded-key.pem
          chmod 400 ~/decoded-key.pem

      # Step 8: SSH into EC2 and Deploy
      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/decoded-key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on error
          
            # Navigate to the correct directory
            cd ~/user-service  # Ensure we are inside the right project folder
          
            # Ensure the old containers are stopped
            docker compose down || true
          
            # Remove the old image to force a fresh pull
            docker rmi -f ${{ secrets.DOCKER_USERNAME }}/user-service:latest || true
          
            # Pull the latest UserService image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          
            # âœ… No need to recreate .env (already exists on EC2)
          
            # Start all services using Docker Compose
            docker compose up -d --remove-orphans
          
            echo "ðŸš€ Deployment Complete!"
          EOF
